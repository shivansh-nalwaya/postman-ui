{"ast":null,"code":"var _jsxFileName = \"/home/shivansh/Projects/udaan/src/pages/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Layout from \"../components/layout\";\nimport URLInput from \"../components/url-input\";\nimport ReqBodyInput from \"../components/req-body-input\";\nimport ResponseView from \"../components/response-view\";\nimport { Provider } from \"../contexts/postman-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst IndexPage = () => {\n  _s();\n\n  const [url, setUrl] = useState(\"\");\n  const [method, setMethod] = useState(\"GET\");\n  const [reqBody, setReqBody] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [status, setStatus] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n  const [isError, setIsError] = useState(false);\n  const [history, setHistory] = useState([]);\n\n  const onHit = () => {\n    setLoading(true);\n    let options = {\n      method\n    };\n    if (method == \"POST\" || method == \"PUT\") options[\"body\"] = reqBody;\n    fetch(url, options).then(res => {\n      setStatus(res.status);\n      return res.text();\n    }).then(res => {\n      if (res) setResponse(JSON.stringify(JSON.parse(res), null, 4));else setResponse(\"Empty response\");\n      setLoading(false);\n      setHistory([...history, {\n        method,\n        url,\n        reqBody\n      }]);\n    }).catch(err => {\n      setResponse(JSON.stringify(err, null, 4));\n      setIsError(true);\n      setLoading(false);\n      setHistory([...history, {\n        method,\n        url,\n        reqBody\n      }]);\n    });\n  };\n\n  const setHistoryItem = item => {\n    setMethod(item.method);\n    setUrl(item.url);\n    setReqBody(item.reqBody);\n    setResponse(\"\");\n    setStatus(\"\");\n  };\n\n  const changeMethod = val => {\n    setMethod(val);\n    setResponse(\"\");\n    setReqBody(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    value: {\n      history,\n      setHistoryItem,\n      url,\n      setUrl,\n      method,\n      changeMethod,\n      reqBody,\n      setReqBody,\n      response,\n      status,\n      isError,\n      onHit,\n      loading\n    },\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      children: [/*#__PURE__*/_jsxDEV(URLInput, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), (method == \"POST\" || method == \"PUT\") && /*#__PURE__*/_jsxDEV(ReqBodyInput, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 51\n      }, this), /*#__PURE__*/_jsxDEV(ResponseView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(IndexPage, \"O7wf9SdeHCZLNduW+juke6O0sQE=\");\n\n_c = IndexPage;\nexport default IndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/home/shivansh/Projects/udaan/src/pages/index.js"],"names":["React","useState","Layout","URLInput","ReqBodyInput","ResponseView","Provider","IndexPage","url","setUrl","method","setMethod","reqBody","setReqBody","loading","setLoading","status","setStatus","response","setResponse","isError","setIsError","history","setHistory","onHit","options","fetch","then","res","text","JSON","stringify","parse","catch","err","setHistoryItem","item","changeMethod","val"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Layout from \"../components/layout\";\nimport URLInput from \"../components/url-input\";\nimport ReqBodyInput from \"../components/req-body-input\";\nimport ResponseView from \"../components/response-view\";\nimport { Provider } from \"../contexts/postman-context\";\n\nconst IndexPage = () => {\n  const [url, setUrl] = useState(\"\");\n  const [method, setMethod] = useState(\"GET\");\n  const [reqBody, setReqBody] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [status, setStatus] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n  const [isError, setIsError] = useState(false);\n  const [history, setHistory] = useState([]);\n\n  const onHit = () => {\n    setLoading(true);\n\n    let options = {\n      method,\n    };\n    if (method == \"POST\" || method == \"PUT\") options[\"body\"] = reqBody;\n\n    fetch(url, options)\n      .then((res) => {\n        setStatus(res.status);\n        return res.text();\n      })\n      .then((res) => {\n        if (res) setResponse(JSON.stringify(JSON.parse(res), null, 4));\n        else setResponse(\"Empty response\");\n        setLoading(false);\n        setHistory([...history, { method, url, reqBody }]);\n      })\n      .catch((err) => {\n        setResponse(JSON.stringify(err, null, 4));\n        setIsError(true);\n        setLoading(false);\n        setHistory([...history, { method, url, reqBody }]);\n      });\n  };\n\n  const setHistoryItem = (item) => {\n    setMethod(item.method);\n    setUrl(item.url);\n    setReqBody(item.reqBody);\n    setResponse(\"\");\n    setStatus(\"\");\n  };\n\n  const changeMethod = (val) => {\n    setMethod(val);\n    setResponse(\"\");\n    setReqBody(\"\");\n  };\n\n  return (\n    <Provider\n      value={{\n        history,\n        setHistoryItem,\n        url,\n        setUrl,\n        method,\n        changeMethod,\n        reqBody,\n        setReqBody,\n        response,\n        status,\n        isError,\n        onHit,\n        loading,\n      }}\n    >\n      <Layout>\n        <URLInput />\n        {(method == \"POST\" || method == \"PUT\") && <ReqBodyInput />}\n        <ResponseView />\n      </Layout>\n    </Provider>\n  );\n};\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}